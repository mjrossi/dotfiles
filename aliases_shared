alias cd.="cd .."
alias cd2.="cd ../.."
alias cd3.="cd ../../.."
alias cd4.="cd ../../../.."
alias cd5.="cd ../../../../.."
alias cd6.="cd ../../../../../.."

alias ll='ls -halF'
alias la='ls -A'
alias l='ls -CF'

tmux_public() {
  if [ -n "$TMUX" ]; then
    tmux_filepath=${TMUX%%,*}
    chmod 777 $tmux_filepath
  else
    echo "You must run this command from within a tmux session"
  fi
}

tmux_secure() {
  if [ -n "$1" ]; then
    chmod 700 /tmp/$1
    echo "Set session to be private ($1)"
  else
    echo "Please specify the name of a tmux to secure"
  fi
}

tmux_start () {
  if [ -n "$1" ]; then
    tmux -S /tmp/$1 new-session -s $1 -d
    tmux_secure $1

    tmux -S /tmp/$1 attach -t $1

    # After detaching/exiting from the tmux
    # Check if the session is still active to decide whether to clean or secure
    if ps -o ruser,command -ax | grep -q "[n]ew-session -s $1" ; then
      tmux_secure $1
    else
      rm /tmp/$1
      echo "Deleted unused session ($1)"
    fi
  else
    echo "Please specify the name of a tmux to start"
  fi
}

tmux_list () {
  ps -o ruser,command -ax | grep '[n]ew-session -s' | ruby -ne '$_ =~ /^(\w+).*-s (\w+)/; puts "#{$1} started #{$2}"'
}

alias tmux-start='tmux_start'
alias tmuxs='tmux_start'
alias tmux-list='tmux_list'
alias tmuxl='tmux_list'
alias tmux-public='tmux_public'
alias tmuxpub='tmux_public'

alias mtmux="tmux new-session -s matt"
alias kns="kubens"
alias kctx="kubectx"
alias kt="kubetail"
alias mytokens="~/SecurityTokenScript"

fknkilldocker() {
  echo '[INFO] Stopping and removing all docker containers and networks.'
  docker ps --all --quiet | xargs docker rm --force --volumes
  docker network ls --quiet | xargs docker network rm 2>&1 | grep --invert-match "is a pre-defined network"
  echo '[INFO] Done.'
}

fknnukedocker() {
  echo '[INFO] Stopping and removing all docker containers and networks.'
  docker ps --all --quiet | xargs docker rm --force --volumes
  docker network ls --quiet | xargs docker network rm 2>&1 | grep --invert-match "is a pre-defined network"
  docker rmi -f $(docker images -a -q)
  echo '[INFO] Done.'
}

############################################################################
#                                                                          #
#               ------- Useful Docker Aliases --------                     #
#                                                                          #
#     # Installation :                                                     #
#     copy/paste these lines into your .bashrc or .zshrc file or just      #
#     type the following in your current shell to try it out:              #
#     wget -O - https://gist.githubusercontent.com/jgrodziski/9ed4a17709baad10dbcd4530b60dfcbb/raw/d84ef1741c59e7ab07fb055a70df1830584c6c18/docker-aliases.sh | bash
#                                                                          #
#     # Usage:                                                             #
#                       dcp                                              : docker-compose (standalone)
#     dcu            : docker-compose up -d                                #
#     dcd            : docker-compose down                                 #
#     dex <container>: execute a bash shell inside the RUNNING <container> #
#     di <container> : docker inspect <container>                          #
#     dim            : docker images                                       #
#     dip            : IP addresses of all running containers              #
#     dl <container> : docker logs -f <container>                          #
#     dnames         : names of all running containers                     #
#     dps            : docker ps                                           #
#     dpsa           : docker ps -a                                        #
#     drmc           : remove all exited containers                        #
#     drmid          : remove all dangling images                          #
#     drun <image>   : execute a bash shell in NEW container from <image>  #
#     dsr <container>: stop then remove <container>                        #
#                                                                          #
############################################################################

function dnames-fn {
        for ID in `docker ps | awk '{print $1}' | grep -v 'CONTAINER'`
        do
        docker inspect $ID | grep Name | head -1 | awk '{print $2}' | sed 's/,//g' | sed 's%/%%g' | sed 's/"//g'
        done
}

function dip-fn {
        echo "IP addresses of all named running containers"

        for DOC in `dnames-fn`
        do
                IP=`docker inspect $DOC | grep -m3 IPAddress | cut -d '"' -f 4 | tr -d "\n"`
                echo $DOC : $IP
        done
}

function dex-fn {
        docker exec -it $1 /bin/bash
}

function di-fn {
        docker inspect $1
}

function dl-fn {
        docker logs -f $1
}

function drun-fn {
        docker run -it $1 /bin/bash
}

function dsr-fn {
        docker stop $1;docker rm $1
}

alias dcp="docker-compose"
alias dcu="docker-compose up -d"
alias dcd="docker-compose down"
alias dex=dex-fn
alias di=di-fn
alias dim="docker images"
alias dip=dip-fn
alias dl=dl-fn
alias dnames=dnames-fn
alias dps="docker ps"
alias dpsa="docker ps -a"
alias drmc="docker rm $(docker ps --all -q -f status=exited)"
alias drmid="docker rmi $( docker images -q -f dangling=true)"
alias drun=drun-fn
alias dsr=dsr-fn
